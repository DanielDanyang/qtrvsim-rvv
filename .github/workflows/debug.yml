name: Debug

on: [ push, workflow_dispatch, pull_request ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    needs: [ build-riscv-tests ]
    # Avoid duplicate builds on PR from the same repository
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc", cxx: "g++", build_system: "Unix Makefiles",
            qt_version: "native",
            qt_install_command: "sudo apt-get update && sudo apt-get install qtbase5-dev",
            # Apt is significantly faster that aqt.
          }
          - {
            name: "Ubuntu Latest GCC + Qt6",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc", cxx: "g++", build_system: "Unix Makefiles",
            qt_version: "6.2.1"
          }
          - {
            name: "Ubuntu 18 GCC",
            os: ubuntu-18.04,
            build_type: "Debug",
            cc: "gcc", cxx: "g++", build_system: "Unix Makefiles",
            qt_version: "native",
            qt_install_command: "sudo apt-get update && sudo apt-get install qt5-default"
              # Apt is significantly faster that aqt.
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Debug",
            cc: "clang", cxx: "clang++", build_system: "Unix Makefiles",
            qt_version: "5.15.2",
            # Cached aqt is faster that brew.
          }
          - {
            name: "Windows 2019 MinGW",
            os: windows-2019,
            build_type: "Debug",
            cc: "gcc", cxx: "g++", build_system: "MinGW Makefiles",
            # Older Qt releases do not have 64bit mingw release
            qt_version: "5.12.9", qt_arch: "win64_mingw73"
          }

    steps:
      - uses: actions/checkout@v2
      - run: git submodule update --recursive --init

      - name: Ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.ref_name }}-${{ matrix.config.name }}

      - name: Cache Qt
        # Cache only when not installed by os package manager
        if: matrix.config.qt_version != 'native'
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-${{ matrix.config.qt_version }}-Qt

      - name: Install specified Qt version
        if: matrix.config.qt_version != 'native'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{ matrix.config.qt_arch }}
          dir: ${{ github.workspace }}/Qt

      - name: Install native Qt by package manager
        if: matrix.config.qt_version == 'native'
        run: ${{ matrix.config.qt_install_command }}

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: "cmake $GITHUB_WORKSPACE
                    -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
                    -DCMAKE_C_COMPILER=${{ matrix.config.cc }}
                    -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
                    -DCMAKE_C_COMPILER_LAUNCHER=ccache
                    -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
                    -DFORCE_COLORED_OUTPUT=true
                    -G \"${{ matrix.config.build_system }}\""

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . -j3

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: ctest --output-on-failure --verbose

      - name: Get official RISC-V tests
        if: ${{ steps.cache-tests.outputs.cache-hit != 'true' }}
        uses: alehechka/download-tartifact@v1
        with:
          name: riscv-official-tests

      - name: Official RISC-V tests (single cycle)
        # The testing python script does not support Ubuntu 18
        if: matrix.config.os != 'ubuntu-18.04'
        working-directory: ${{ github.workspace }}/tests/riscv-official
        #run: python qtrvsim_tester.py --no-64  ${{ github.workspace }}/build/target/qtrvsim_cli
        run: python qtrvsim_tester.py -M ${{ github.workspace }}/build/target/qtrvsim_cli

      - name: Official RISC-V tests (pipelined)
        # The testing python script does not support Ubuntu 18
        if: matrix.config.os != 'ubuntu-18.04'
        working-directory: ${{ github.workspace }}/tests/riscv-official
        #run: python qtrvsim_tester.py --no-64  ${{ github.workspace }}/build/target/qtrvsim_cli
        run: python qtrvsim_tester.py -M --pipeline ${{ github.workspace }}/build/target/qtrvsim_cli

      - name: Official RISC-V tests (single cycle, cached)
        # The testing python script does not support Ubuntu 18
        if: matrix.config.os != 'ubuntu-18.04'
        working-directory: ${{ github.workspace }}/tests/riscv-official
        #run: python qtrvsim_tester.py --no-64  ${{ github.workspace }}/build/target/qtrvsim_cli
        run: python qtrvsim_tester.py -M --cache ${{ github.workspace }}/build/target/qtrvsim_cli

      - name: Official RISC-V tests (pipelined, cached)
        # The testing python script does not support Ubuntu 18
        if: matrix.config.os != 'ubuntu-18.04'
        working-directory: ${{ github.workspace }}/tests/riscv-official
        #run: python qtrvsim_tester.py --no-64  ${{ github.workspace }}/build/target/qtrvsim_cli
        run: python qtrvsim_tester.py -M --pipeline --cache ${{ github.workspace }}/build/target/qtrvsim_cli

      - name: Store created artifacts
        uses: actions/upload-artifact@v2
        with:
          name: target-${{ runner.os }}-qt${{ matrix.config.qt_version }}
          path: ${{ github.workspace }}/build/target

  build-emscripten:
    name: ${{ matrix.config.name }}
    # Avoid duplicate builds on PR from the same repository
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "WASM Linux",
            os: ubuntu-latest,
            build_type: Release,
            qt_arch: wasm_32,
            emsdk_version: 1.39.8,
            qt_version: 5.15.2,
          }
    steps:
      - uses: actions/checkout@v2

      - name: Ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.ref_name }}-${{ matrix.config.name }}

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-${{ matrix.config.qt_version }}-wasm-Qt

      - name: Setup EMSDK cache
        id: cache-system-libraries
        uses: actions/cache@v2
        with:
          path: 'emsdk-cache'
          key: ${{ runner.os }}-${{ matrix.config.emsdk_version }}-${{ matrix.config.qt_version }}-emsdk

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v10
        with:
          version: ${{ matrix.config.emsdk_version }}
          actions-cache-folder: 'emsdk-cache'

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{ matrix.config.qt_arch }}
          dir: ${{ github.workspace }}/Qt

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: "emcmake cmake $GITHUB_WORKSPACE
                    -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
                    -DCMAKE_PREFIX_PATH=$Qt5_DIR
                    -DCMAKE_FIND_ROOT_PATH=$Qt5_DIR
                    -DCMAKE_C_COMPILER_LAUNCHER=ccache
                    -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
                    -DFORCE_COLORED_OUTPUT=true
                    -Wno-dev"

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . -j3

      - name: Store created artifacts
        uses: actions/upload-artifact@v2
        with:
          name: target-wasm-${{ runner.os }}-qt${{ matrix.config.qt_version }}
          path: ${{ github.workspace }}/build/target

  build-riscv-tests:
    name: Build official RISC-V tests
    # Avoid duplicate builds on PR from the same repository
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - run: git submodule update --recursive --init

      - name: Get cache key
        uses: mathiasvr/command-output@v1
        id: subtree-hash
        with:
          run: git rev-parse HEAD:tests/riscv-official/

      - name: Cache
        id: cache-tests
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/tests/riscv-official/isa
          key: riscv-tests-${{ steps.subtree-hash.outputs.stdout }}

      - name: Toolchain for official RISC-V tests
        if: ${{ steps.cache-tests.outputs.cache-hit != 'true' }}
        working-directory: ${{ github.workspace }}/tests/riscv-official
        # Version 14 is needed to correctly process newer parts of RV
        run: |
          ### Ubuntu 22 already provides those
          # echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" | sudo tee -a /etc/apt/sources.list &&
          # wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - &&
          sudo apt-get update &&
          sudo apt-get install clang-14 lldb-14 lld-14

      - name: Build official RISC-V tests
        if: ${{ steps.cache-tests.outputs.cache-hit != 'true' }}
        working-directory: ${{ github.workspace }}/tests/riscv-official/isa
        env:
          RISCV_COMPILER: clang-14
          USE_CLANG_OPTS: true
          RISCV_OBJDUMP_CMD: llvm-objdump-14
        run: make

      - name: Store created artifacts
        # Use of tar significantly improves performance as artifact upload has significant per file penalty
        uses: alehechka/upload-tartifact@v1
        with:
          name: riscv-official-tests
          path: tests/riscv-official/isa